# Full System Toolkit - Enhanced Version
# Inspired by winutil.ps1

Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms

################################################################################################################
### WARNING: This file is automatically generated. DO NOT modify this file directly as it will be overwritten ###
################################################################################################################

param (
    [switch]$Debug,
    [string]$Config,
    [switch]$Run
)

# Set DebugPreference based on the -Debug switch
if ($Debug) {
    $DebugPreference = "Continue"
}

if ($Config) {
    $PARAM_CONFIG = $Config
}

$PARAM_RUN = $false
if ($Run) {
    $PARAM_RUN = $true
}

# Define Logging Function
$LogFile = "$env:USERPROFILE\SystemToolkit.log"
Function Log-Action {
    param ([string]$Message)
    "$((Get-Date).ToString("yyyy-MM-dd HH:mm:ss")) - $Message" | Out-File -Append -FilePath $LogFile
    Write-Host $Message
}

# Check if Winget is installed
Function Test-WingetInstalled {
    try {
        $wingetVersion = winget --version
        return $true
    } catch {
        return $false
    }
}

# Check if Chocolatey is installed
Function Test-ChocoInstalled {
    try {
        $chocoVersion = choco --version
        return $true
    } catch {
        return $false
    }
}

# Install Software using Winget or Chocolatey
Function Install-Software {
    param (
        [array]$Programs,
        [string]$PackageManager = "winget"
    )
    if ($PackageManager -eq "winget" -and (-not (Test-WingetInstalled))) {
        Log-Action "Winget is not installed. Please install Winget first."
        return
    }
    if ($PackageManager -eq "choco" -and (-not (Test-ChocoInstalled))) {
        Log-Action "Chocolatey is not installed. Please install Chocolatey first."
        return
    }

    foreach ($program in $Programs) {
        Log-Action "Installing $program using $PackageManager..."
        try {
            if ($PackageManager -eq "winget") {
                winget install --id $program --silent --accept-package-agreements --accept-source-agreements
            } elseif ($PackageManager -eq "choco") {
                choco install $program -y
            }
            Log-Action "$program installed successfully."
        } catch {
            Log-Action "Failed to install $program: $_"
        }
    }
}

# Define Software Installation UI
Function Show-SoftwareInstallWindow {
    [xml]$SoftwareXAML = @"
<Window Title="Software Installation" Height="700" Width="800" ResizeMode="NoResize" WindowStartupLocation="CenterScreen">
    <Grid>
        <Label Content="Select a Package Manager:" HorizontalAlignment="Left" Margin="20,20,0,0" VerticalAlignment="Top" FontSize="16"/>
        <RadioButton x:Name="WingetRadio" Content="Winget" HorizontalAlignment="Left" Margin="20,50,0,0" VerticalAlignment="Top" FontSize="14"/>
        <RadioButton x:Name="ChocoRadio" Content="Chocolatey" HorizontalAlignment="Left" Margin="20,80,0,0" VerticalAlignment="Top" FontSize="14"/>
        
        <Label Content="Web Browsers:" HorizontalAlignment="Left" Margin="20,120,0,0" VerticalAlignment="Top" FontSize="16"/>
        <CheckBox x:Name="ChromeCheck" Content="Google Chrome" HorizontalAlignment="Left" Margin="20,150,0,0" VerticalAlignment="Top" FontSize="14"/>
        <CheckBox x:Name="FirefoxCheck" Content="Mozilla Firefox" HorizontalAlignment="Left" Margin="20,180,0,0" VerticalAlignment="Top" FontSize="14"/>
        <CheckBox x:Name="EdgeCheck" Content="Microsoft Edge" HorizontalAlignment="Left" Margin="20,210,0,0" VerticalAlignment="Top" FontSize="14"/>
        
        <Label Content="Development Tools:" HorizontalAlignment="Left" Margin="300,120,0,0" VerticalAlignment="Top" FontSize="16"/>
        <CheckBox x:Name="GitCheck" Content="Git" HorizontalAlignment="Left" Margin="300,150,0,0" VerticalAlignment="Top" FontSize="14"/>
        <CheckBox x:Name="PythonCheck" Content="Python" HorizontalAlignment="Left" Margin="300,180,0,0" VerticalAlignment="Top" FontSize="14"/>
        <CheckBox x:Name="NodeJSCheck" Content="Node.js" HorizontalAlignment="Left" Margin="300,210,0,0" VerticalAlignment="Top" FontSize="14"/>
        
        <Label Content="Productivity Apps:" HorizontalAlignment="Left" Margin="20,250,0,0" VerticalAlignment="Top" FontSize="16"/>
        <CheckBox x:Name="LibreOfficeCheck" Content="LibreOffice" HorizontalAlignment="Left" Margin="20,280,0,0" VerticalAlignment="Top" FontSize="14"/>
        <CheckBox x:Name="NotepadPlusCheck" Content="Notepad++" HorizontalAlignment="Left" Margin="20,310,0,0" VerticalAlignment="Top" FontSize="14"/>
        
        <Label Content="Media Players:" HorizontalAlignment="Left" Margin="300,250,0,0" VerticalAlignment="Top" FontSize="16"/>
        <CheckBox x:Name="VLCCheck" Content="VLC Media Player" HorizontalAlignment="Left" Margin="300,280,0,0" VerticalAlignment="Top" FontSize="14"/>
        <CheckBox x:Name="SpotifyCheck" Content="Spotify" HorizontalAlignment="Left" Margin="300,310,0,0" VerticalAlignment="Top" FontSize="14"/>
        
        <Button x:Name="InstallButton" Content="Install Selected" HorizontalAlignment="Center" Margin="0,400,0,0" VerticalAlignment="Top" Width="180" Height="50" FontSize="16" FontWeight="Bold"/>
    </Grid>
</Window>
"@

    $SoftwareReader = (New-Object System.Xml.XmlNodeReader $SoftwareXAML)
    $SoftwareWindow = [Windows.Markup.XamlReader]::Load($SoftwareReader)

    # Connect UI Elements
    $WingetRadio = $SoftwareWindow.FindName("WingetRadio")
    $ChocoRadio = $SoftwareWindow.FindName("ChocoRadio")
    $InstallButton = $SoftwareWindow.FindName("InstallButton")

    # Define Install Button Click Event
    $InstallButton.Add_Click({
        $PackageManager = if ($WingetRadio.IsChecked) { "winget" } else { "choco" }
        $Programs = @()
        if ($SoftwareWindow.FindName("ChromeCheck").IsChecked) { $Programs += "Google.Chrome" }
        if ($SoftwareWindow.FindName("FirefoxCheck").IsChecked) { $Programs += "Mozilla.Firefox" }
        if ($SoftwareWindow.FindName("EdgeCheck").IsChecked) { $Programs += "Microsoft.Edge" }
        if ($SoftwareWindow.FindName("GitCheck").IsChecked) { $Programs += "Git.Git" }
        if ($SoftwareWindow.FindName("PythonCheck").IsChecked) { $Programs += "Python.Python" }
        if ($SoftwareWindow.FindName("NodeJSCheck").IsChecked) { $Programs += "OpenJS.NodeJS" }
        if ($SoftwareWindow.FindName("LibreOfficeCheck").IsChecked) { $Programs += "TheDocumentFoundation.LibreOffice" }
        if ($SoftwareWindow.FindName("NotepadPlusCheck").IsChecked) { $Programs += "Notepad++.Notepad++" }
        if ($SoftwareWindow.FindName("VLCCheck").IsChecked) { $Programs += "VideoLAN.VLC" }
        if ($SoftwareWindow.FindName("SpotifyCheck").IsChecked) { $Programs += "Spotify.Spotify" }

        if ($Programs.Count -gt 0) {
            Install-Software -Programs $Programs -PackageManager $PackageManager
        } else {
            [System.Windows.MessageBox]::Show("No software selected.", "Error", "OK", "Error")
        }
    })

    $SoftwareWindow.ShowDialog() | Out-Null
}

# Launch Software Installation Window
Show-SoftwareInstallWindow
